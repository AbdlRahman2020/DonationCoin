{"ast":null,"code":"var _jsxFileName = \"/Users/iphone13.5/donationcoin/src/components/DonatorSignup.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useHistory, Link, Route } from 'react-router-dom';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DonatorSignup = () => {\n  _s();\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [success, setSuccess] = useState(false);\n  const history = useHistory();\n  var web3 = new Web3();\n  web3 = new Web3('HTTP://127.0.0.1:8545');\n\n  let admins = require('./ABI.json');\n\n  const abi = admins[0].abi;\n\n  const submitInput = async e => {\n    var currentAccount;\n    var contract = new web3.eth.Contract(abi, currentAccount);\n    e.preventDefault();\n    var currentAccount;\n\n    if (username && password) {\n      console.log(username);\n      console.log(password);\n      await web3.eth.getAccounts().then(function (accounts) {\n        // need a function in contract to map existing donator address to [password, value] pair\n        // they used the pair to login\n        // for each address for accounts, cheak their password and username for login,\n        contract.methods.xxx(each_address).call().then(function (pair) {\n          if (pair === [username, password]) {\n            setSuccess(true); // success = true means can't sign up since already exists [username, password] pair\n          }\n        });\n      });\n\n      if (success !== true) {\n        // sign up sucessfully\n        web3.eth.personal.newAccount(username + password, function (err, res) {\n          console.log(\"error: \" + err);\n          console.log(\"res: \" + res);\n        });\n        web3.eth.getAccounts().then(function (accounts) {\n          // need a function in contract to map [password, value] pair to new created charity address\n          // they used the pair to login\n          // currentAccount is new created one\n          // aim to bind [username, password] to account\n          currentAccount = accounts[-1];\n          contract.methods.xxx([username, password]).send({\n            from: currentAccount\n          }).then();\n          // to self donatorpage\n          history.push({\n            pathname: '/donator/' + currentAccount,\n            state: {\n              address: currentAccount\n            }\n          });\n        });\n      } else {\n        alert(\"username exists, try another one or log in\");\n      }\n    } else {\n      alert(\"please use valid username and password\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/donator\",\n      style: {\n        position: 'absolute',\n        marginLeft: \"80vw\",\n        marginTop: \"5vh\",\n        color: \"red\"\n      },\n      children: \"Click here to go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      className: \"labelinput\",\n      onSubmit: submitInput,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: \"#92eb49\",\n          textAlign: \"center\",\n          minHeight: \"20vh\",\n          marginTop: \"10vh\"\n        },\n        children: \"User reigistration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"label\",\n        value: username,\n        placeholder: \"Username\",\n        onChange: event => setUsername(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"label\",\n        value: password,\n        placeholder: \"Password\",\n        onChange: event => setPassword(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Enter\",\n        className: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DonatorSignup, \"uFIah0mG+WzCeoFD89kC7hwRGRE=\", false, function () {\n  return [useHistory];\n});\n\n_c = DonatorSignup;\nexport default DonatorSignup;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonatorSignup\");","map":{"version":3,"sources":["/Users/iphone13.5/donationcoin/src/components/DonatorSignup.js"],"names":["useState","useHistory","Link","Route","Web3","DonatorSignup","username","setUsername","password","setPassword","success","setSuccess","history","web3","admins","require","abi","submitInput","e","currentAccount","contract","eth","Contract","preventDefault","console","log","getAccounts","then","accounts","methods","xxx","each_address","call","pair","personal","newAccount","err","res","send","from","push","pathname","state","address","alert","position","marginLeft","marginTop","color","textAlign","minHeight","event","target","value"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,KAA1B,QAAsC,kBAAtC;AAEA,OAAOC,IAAP,MAAiB,MAAjB;;;AACA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAGA,QAAMY,OAAO,GAAGX,UAAU,EAA1B;AACA,MAAIY,IAAI,GAAG,IAAIT,IAAJ,EAAX;AACAS,EAAAA,IAAI,GAAG,IAAIT,IAAJ,CAAS,uBAAT,CAAP;;AACA,MAAIU,MAAM,GAAGC,OAAO,CAAC,YAAD,CAApB;;AACA,QAAMC,GAAG,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUE,GAAtB;;AAIA,QAAMC,WAAW,GAAG,MAAMC,CAAN,IAAY;AAC5B,QAAIC,cAAJ;AACA,QAAIC,QAAQ,GAAG,IAAIP,IAAI,CAACQ,GAAL,CAASC,QAAb,CAAsBN,GAAtB,EAA2BG,cAA3B,CAAf;AACAD,IAAAA,CAAC,CAACK,cAAF;AACA,QAAIJ,cAAJ;;AACA,QAAIb,QAAQ,IAAIE,QAAhB,EAA0B;AAEtBgB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,QAAZ;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;AACA,YAAMK,IAAI,CAACQ,GAAL,CAASK,WAAT,GAAuBC,IAAvB,CAA4B,UAASC,QAAT,EAAkB;AAChD;AACA;AACA;AAEGR,QAAAA,QAAQ,CAACS,OAAT,CAAiBC,GAAjB,CAAqBC,YAArB,EAAmCC,IAAnC,GAA0CL,IAA1C,CACI,UAASM,IAAT,EAAc;AACV,cAAGA,IAAI,KAAK,CAAC3B,QAAD,EAAWE,QAAX,CAAZ,EAAiC;AAC5BG,YAAAA,UAAU,CAAC,IAAD,CAAV,CAD4B,CAE5B;AACJ;AACJ,SANL;AAWF,OAhBC,CAAN;;AAmBA,UAAID,OAAO,KAAK,IAAhB,EAAqB;AACjB;AACAG,QAAAA,IAAI,CAACQ,GAAL,CAASa,QAAT,CAAkBC,UAAlB,CAA6B7B,QAAQ,GAAGE,QAAxC,EAAkD,UAAS4B,GAAT,EAAcC,GAAd,EAAkB;AAEhEb,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAUW,GAAtB;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAQY,GAApB;AAEH,SALD;AAOAxB,QAAAA,IAAI,CAACQ,GAAL,CAASK,WAAT,GAAuBC,IAAvB,CAA4B,UAASC,QAAT,EAAkB;AAC1C;AACA;AACA;AACA;AACAT,UAAAA,cAAc,GAAGS,QAAQ,CAAC,CAAC,CAAF,CAAzB;AACAR,UAAAA,QAAQ,CAACS,OAAT,CAAiBC,GAAjB,CAAqB,CAACxB,QAAD,EAAWE,QAAX,CAArB,EAA2C8B,IAA3C,CAAgD;AAACC,YAAAA,IAAI,EAAEpB;AAAP,WAAhD,EAAwEQ,IAAxE;AAIA;AACAf,UAAAA,OAAO,CAAC4B,IAAR,CAAa;AAACC,YAAAA,QAAQ,EAAE,cAActB,cAAzB;AAAyCuB,YAAAA,KAAK,EAAE;AACzDC,cAAAA,OAAO,EAAExB;AADgD;AAAhD,WAAb;AAEH,SAbD;AAgBH,OAzBD,MA0BI;AACAyB,QAAAA,KAAK,CAAC,4CAAD,CAAL;AACH;AAEJ,KArDD,MAsDI;AACAA,MAAAA,KAAK,CAAC,wCAAD,CAAL;AAGH;AACJ,GAhED;;AAmEA,sBACI;AAAA,4BACY,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,UAAT;AAAoB,MAAA,KAAK,EAAE;AAACC,QAAAA,QAAQ,EAAC,UAAV;AAAsBC,QAAAA,UAAU,EAAC,MAAjC;AAAyCC,QAAAA,SAAS,EAAC,KAAnD;AAA0DC,QAAAA,KAAK,EAAC;AAAhE,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADZ,eAKY;AAAM,MAAA,MAAM,EAAC,EAAb;AAAgB,MAAA,SAAS,EAAC,YAA1B;AAAuC,MAAA,QAAQ,EAAE/B,WAAjD;AAAA,8BACA;AAAI,QAAA,KAAK,EAAE;AAAC+B,UAAAA,KAAK,EAAC,SAAP;AAAkBC,UAAAA,SAAS,EAAC,QAA5B;AAAsCC,UAAAA,SAAS,EAAC,MAAhD;AAAwDH,UAAAA,SAAS,EAAC;AAAlE,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,OAA7B;AAAqC,QAAA,KAAK,EAAEzC,QAA5C;AAAuD,QAAA,WAAW,EAAC,UAAnE;AAA8E,QAAA,QAAQ,EAAG6C,KAAD,IAAW5C,WAAW,CAAC4C,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA9G;AAAA;AAAA;AAAA;AAAA,cAFA,eAIA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,OAA7B;AAAqC,QAAA,KAAK,EAAE7C,QAA5C;AAAsD,QAAA,WAAW,EAAC,UAAlE;AAA6E,QAAA,QAAQ,EAAG2C,KAAD,IAAW1C,WAAW,CAAC0C,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA7G;AAAA;AAAA;AAAA;AAAA,cAJA,eAKA;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAsB,QAAA,KAAK,EAAC,OAA5B;AAAoC,QAAA,SAAS,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,cALA;AAAA;AAAA;AAAA;AAAA;AAAA,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAjGD;;GAAMhD,a;UAMcJ,U;;;KANdI,a;AAmGN,eAAeA,aAAf","sourcesContent":["import {useState} from 'react'\nimport {useHistory, Link, Route} from 'react-router-dom'\n\nimport Web3 from 'web3'\nconst DonatorSignup = () => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [success, setSuccess] = useState(false)\n    \n\n    const history = useHistory();\n    var web3 = new Web3();\n    web3 = new Web3('HTTP://127.0.0.1:8545');\n    let admins = require('./ABI.json');\n    const abi = admins[0].abi;\n\n    \n\n    const submitInput = async(e) => {\n        var currentAccount;\n        var contract = new web3.eth.Contract(abi, currentAccount)\n        e.preventDefault();\n        var currentAccount;\n        if (username && password) {\n            \n            console.log(username);\n            console.log(password);\n            await web3.eth.getAccounts().then(function(accounts){\n                // need a function in contract to map existing donator address to [password, value] pair\n                // they used the pair to login\n                // for each address for accounts, cheak their password and username for login,\n                \n                   contract.methods.xxx(each_address).call().then(\n                       function(pair){\n                           if(pair === [username, password]){\n                                setSuccess(true) \n                                // success = true means can't sign up since already exists [username, password] pair\n                           }\n                       }\n                    )\n                   \n    \n                    \n                })\n\n \n            if (success !== true){\n                // sign up sucessfully\n                web3.eth.personal.newAccount(username + password, function(err, res){\n\n                    console.log(\"error: \"+err);\n                    console.log(\"res: \"+res);\n        \n                });\n                \n                web3.eth.getAccounts().then(function(accounts){\n                    // need a function in contract to map [password, value] pair to new created charity address\n                    // they used the pair to login\n                    // currentAccount is new created one\n                    // aim to bind [username, password] to account\n                    currentAccount = accounts[-1]\n                    contract.methods.xxx([username, password]).send({from: currentAccount}).then(\n                        // function or not           \n                        \n                        )\n                    // to self donatorpage\n                    history.push({pathname: '/donator/' + currentAccount, state: {\n                        address: currentAccount }})\n                })\n                \n                \n            }\n            else{\n                alert(\"username exists, try another one or log in\")\n            }\n            \n        } \n        else{\n            alert(\"please use valid username and password\")\n\n\n        }\n    }\n    \n\n    return (\n        <div >\n                    <Link to=\"/donator\" style={{position:'absolute', marginLeft:\"80vw\", marginTop:\"5vh\", color:\"red\"}}>Click here to go back</Link>\n                    {/* <label htmlFor=\"\" className=\"label\">\n                        Username:\n                    </label> */}\n                    <form action=\"\" className=\"labelinput\" onSubmit={submitInput}>\n                    <h1 style={{color:\"#92eb49\", textAlign:\"center\", minHeight:\"20vh\", marginTop:\"10vh\"}}>User reigistration</h1>\n                    <input type=\"text\" className=\"label\" value={username}  placeholder=\"Username\" onChange={(event) => setUsername(event.target.value)}/>\n                    {/* <label htmlFor=\"\" className=\"label\">Password:</label> */}\n                    <input type=\"text\" className=\"label\" value={password} placeholder=\"Password\" onChange={(event) => setPassword(event.target.value)}/>\n                    <input type=\"submit\"  value=\"Enter\" className=\"submit\" />\n\n                    </form>\n        </div>\n    )\n}\n\nexport default DonatorSignup\n"]},"metadata":{},"sourceType":"module"}